basePath: /
definitions:
  handlers.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  handlers.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  handlers.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/handlers.UserResponse'
    type: object
  handlers.OutletCreateRequest:
    properties:
      address:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  handlers.OutletUpdateRequest:
    properties:
      address:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  handlers.ProductCreateRequest:
    properties:
      description:
        type: string
      name:
        type: string
      price:
        type: number
      sku:
        type: string
      type:
        type: string
    type: object
  handlers.ProductUpdateRequest:
    properties:
      description:
        type: string
      name:
        type: string
      price:
        type: number
      sku:
        type: string
      type:
        type: string
    type: object
  handlers.RegisterRequest:
    properties:
      outlet_id:
        type: integer
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  handlers.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  handlers.UpdateStockRequest:
    properties:
      quantity:
        type: number
    type: object
  handlers.UserResponse:
    properties:
      uuid:
        type: string
      id:
        type: integer
      outlet_id:
        type: integer
      role:
        type: string
      username:
        type: string
    type: object
  models.CreateOrderRequest:
    properties:
      items:
        items:
          $ref: '#/definitions/models.OrderItemRequest'
        type: array
      outlet_uuid:
        type: string
    type: object
  models.Order:
    properties:
      created_at:
        type: string
      uuid:
        type: string
      id:
        type: integer
      order_items:
        items:
          $ref: '#/definitions/models.OrderItem'
        type: array
      outlet:
        $ref: '#/definitions/models.Outlet'
      outlet_id:
        type: integer
      status:
        description: e.g., "pending", "completed", "cancelled"
        type: string
      total_amount:
        type: number
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.OrderItem:
    properties:
      created_at:
        type: string
      uuid:
        type: string
      id:
        type: integer
      order:
        $ref: '#/definitions/models.Order'
      order_id:
        type: integer
      price:
        description: Price at the time of order
        type: number
      product:
        $ref: '#/definitions/models.Product'
      product_id:
        type: integer
      quantity:
        type: number
      updated_at:
        type: string
    type: object
  models.OrderItemRequest:
    properties:
      product_uuid:
        type: string
      quantity:
        type: number
    type: object
  models.Outlet:
    properties:
      address:
        type: string
      created_at:
        type: string
      uuid:
        type: string
      id:
        type: integer
      name:
        type: string
      type:
        description: e.g., "retail", "fnb"
        type: string
      updated_at:
        type: string
    type: object
  models.Product:
    properties:
      created_at:
        type: string
      description:
        type: string
      uuid:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      sku:
        type: string
      type:
        description: e.g., "retail_item", "fnb_main_product", "fnb_component"
        type: string
      updated_at:
        type: string
    type: object
  models.Stock:
    properties:
      created_at:
        type: string
      uuid:
        type: string
      id:
        type: integer
      outlet:
        $ref: '#/definitions/models.Outlet'
      outlet_id:
        type: integer
      product:
        $ref: '#/definitions/models.Product'
      product_id:
        type: integer
      quantity:
        type: number
      updated_at:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      uuid:
        type: string
      id:
        type: integer
      is_blocked:
        type: boolean
      outlet:
        $ref: '#/definitions/models.Outlet'
      outlet_id:
        description: Optional, for users tied to a specific outlet
        type: integer
      role:
        description: e.g., admin, manager, cashier
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample POS API server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: POS API Documentation
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return a JWT token.
      parameters:
      - description: User login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/handlers.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Log in a user
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with username, password, role, and optional
        outlet ID.
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/handlers.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Register a new user
      tags:
      - Auth
  /auth/users/{uuid}/block:
    put:
      consumes:
      - application/json
      description: Block a user by their External ID. Only admin can perform this
        action.
      parameters:
      - description: User External ID (UUID)
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Block a user
      tags:
      - Auth
  /auth/users/{uuid}/unblock:
    put:
      consumes:
      - application/json
      description: Unblock a user by their External ID. Only admin can perform this
        action.
      parameters:
      - description: User External ID (UUID)
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Unblock a user
      tags:
      - Auth
  /orders:
    post:
      consumes:
      - application/json
      description: Create a new order with specified products and quantities.
      parameters:
      - description: Order details
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Order'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a new order
      tags:
      - Orders
  /orders/{uuid}:
    get:
      consumes:
      - application/json
      description: Get a single order by its External ID.
      parameters:
      - description: Order External ID (UUID)
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Order'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get order by External ID
      tags:
      - Orders
  /outlets:
    get:
      consumes:
      - application/json
      description: Get a list of all outlets.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Outlet'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get all outlets
      tags:
      - Outlets
    post:
      consumes:
      - application/json
      description: Create a new outlet with the provided details.
      parameters:
      - description: Outlet details
        in: body
        name: outlet
        required: true
        schema:
          $ref: '#/definitions/handlers.OutletCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Outlet'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a new outlet
      tags:
      - Outlets
  /outlets/{uuid}:
    delete:
      consumes:
      - application/json
      description: Delete an outlet by its External ID.
      parameters:
      - description: Outlet External ID (UUID)
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Delete an outlet
      tags:
      - Outlets
    get:
      consumes:
      - application/json
      description: Get a single outlet by its External ID.
      parameters:
      - description: Outlet External ID (UUID)
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Outlet'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get outlet by External ID
      tags:
      - Outlets
    put:
      consumes:
      - application/json
      description: Update an existing outlet by its External ID.
      parameters:
      - description: Outlet External ID (UUID)
        in: path
        name: uuid
        required: true
        type: string
      - description: Updated outlet details
        in: body
        name: outlet
        required: true
        schema:
          $ref: '#/definitions/handlers.OutletUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Outlet'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Update an existing outlet
      tags:
      - Outlets
  /outlets/{outlet_uuid}/orders:
    get:
      consumes:
      - application/json
      description: Get a list of all orders for a given outlet.
      parameters:
      - description: Outlet External ID (UUID)
        in: path
        name: outlet_uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Order'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get all orders for an outlet
      tags:
      - Orders
  /outlets/{outlet_uuid}/stocks:
    get:
      consumes:
      - application/json
      description: Get a list of all stock quantities for products in a given outlet.
      parameters:
      - description: Outlet External ID (UUID)
        in: path
        name: outlet_uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Stock'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get all stocks for an outlet
      tags:
      - Stocks
  /outlets/{outlet_uuid}/stocks/{product_uuid}:
    get:
      consumes:
      - application/json
      description: Get the stock quantity for a specific product in a given outlet.
      parameters:
      - description: Outlet External ID (UUID)
        in: path
        name: outlet_uuid
        required: true
        type: string
      - description: Product External ID (UUID)
        in: path
        name: product_uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Stock'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get stock for a product in an outlet
      tags:
      - Stocks
    put:
      consumes:
      - application/json
      description: Update the stock quantity for a specific product in an outlet.
        This is for direct stock adjustments.
      parameters:
      - description: Outlet External ID (UUID)
        in: path
        name: outlet_uuid
        required: true
        type: string
      - description: Product External ID (UUID)
        in: path
        name: product_uuid
        required: true
        type: string
      - description: Stock update details
        in: body
        name: stock
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateStockRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Stock'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Update stock quantity
      tags:
      - Stocks
  /products:
    get:
      consumes:
      - application/json
      description: Get a list of all products.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Product'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get all products
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Create a new product with the provided details.
      parameters:
      - description: Product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/handlers.ProductCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a new product
      tags:
      - Products
  /products/{uuid}:
    delete:
      consumes:
      - application/json
      description: Delete a product by its External ID.
      parameters:
      - description: Product External ID (UUID)
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Delete a product
      tags:
      - Products
    get:
      consumes:
      - application/json
      description: Get a single product by its External ID.
      parameters:
      - description: Product External ID (UUID)
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get product by External ID
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Update an existing product by its External ID.
      parameters:
      - description: Product External ID (UUID)
        in: path
        name: uuid
        required: true
        type: string
      - description: Updated product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/handlers.ProductUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Update an existing product
      tags:
      - Products
  /reports/outlets/{outlet_uuid}/sales:
    get:
      consumes:
      - application/json
      description: Get a sales report for a specific outlet within a date range.
      parameters:
      - description: Outlet External ID (UUID)
        in: path
        name: outlet_uuid
        required: true
        type: string
      - description: Start date (YYYY-MM-DD)
        in: query
        name: start_date
        required: true
        type: string
      - description: End date (YYYY-MM-DD)
        in: query
        name: end_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Order'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get sales report by outlet
      tags:
      - Reports
  /reports/products/{product_uuid}/sales:
    get:
      consumes:
      - application/json
      description: Get a sales report for a specific product within a date range.
      parameters:
      - description: Product External ID (UUID)
        in: path
        name: product_uuid
        required: true
        type: string
      - description: Start date (YYYY-MM-DD)
        in: query
        name: start_date
        required: true
        type: string
      - description: End date (YYYY-MM-DD)
        in: query
        name: end_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.OrderItem'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get sales report by product
      tags:
      - Reports
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
