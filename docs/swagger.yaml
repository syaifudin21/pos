definitions:
  dtos.CreateOrderRequest:
    properties:
      items:
        items:
          $ref: '#/definitions/dtos.OrderItemRequest'
        type: array
      outlet_uuid:
        type: string
    type: object
  dtos.CreatePurchaseOrderRequest:
    properties:
      items:
        items:
          $ref: '#/definitions/dtos.PurchaseItemRequest'
        type: array
      outlet_uuid:
        type: string
      supplier_uuid:
        type: string
    type: object
  dtos.CreateRecipeRequest:
    properties:
      component_uuid:
        type: string
      main_product_uuid:
        type: string
      quantity:
        type: number
    type: object
  dtos.CreateSupplierRequest:
    properties:
      address:
        type: string
      contact:
        type: string
      name:
        type: string
    type: object
  dtos.GlobalStockUpdateRequest:
    properties:
      outlet_uuid:
        type: string
      product_uuid:
        type: string
      quantity:
        type: number
    type: object
  dtos.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  dtos.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/dtos.UserResponse'
    type: object
  dtos.OrderItemRequest:
    properties:
      product_uuid:
        type: string
      quantity:
        type: integer
    type: object
  dtos.OrderItemResponse:
    properties:
      id:
        type: integer
      order_id:
        type: integer
      order_uuid:
        type: string
      price:
        type: number
      product_id:
        type: integer
      product_name:
        type: string
      product_uuid:
        type: string
      quantity:
        type: number
      uuid:
        type: string
    type: object
  dtos.OrderResponse:
    properties:
      id:
        type: integer
      order_date:
        description: Consider formatting time.Time to string
        type: string
      outlet_id:
        type: integer
      outlet_uuid:
        type: string
      status:
        type: string
      total_amount:
        type: number
      user_id:
        type: integer
      user_uuid:
        type: string
      uuid:
        type: string
    type: object
  dtos.OutletCreateRequest:
    properties:
      address:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  dtos.OutletResponse:
    properties:
      address:
        type: string
      id:
        type: integer
      name:
        type: string
      type:
        type: string
      uuid:
        type: string
    type: object
  dtos.OutletUpdateRequest:
    properties:
      address:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  dtos.ProductCreateRequest:
    properties:
      description:
        type: string
      name:
        type: string
      price:
        type: number
      sku:
        type: string
      type:
        type: string
    type: object
  dtos.ProductOutletResponse:
    properties:
      price:
        type: number
      product_name:
        type: string
      product_sku:
        type: string
      product_uuid:
        type: string
      quantity:
        description: Stock quantity at the outlet
        type: number
      type:
        type: string
    type: object
  dtos.ProductResponse:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      sku:
        type: string
      type:
        type: string
      uuid:
        type: string
    type: object
  dtos.ProductUpdateRequest:
    properties:
      description:
        type: string
      name:
        type: string
      price:
        type: number
      sku:
        type: string
      type:
        type: string
    type: object
  dtos.PurchaseItemRequest:
    properties:
      price:
        type: number
      product_uuid:
        type: string
      quantity:
        type: integer
    type: object
  dtos.PurchaseOrderResponse:
    properties:
      id:
        type: integer
      order_date:
        type: string
      outlet_id:
        type: integer
      outlet_uuid:
        type: string
      status:
        type: string
      supplier_id:
        type: integer
      supplier_uuid:
        type: string
      total_amount:
        type: number
      uuid:
        type: string
    type: object
  dtos.RecipeResponse:
    properties:
      component_id:
        type: integer
      component_uuid:
        type: string
      id:
        type: integer
      main_product_id:
        type: integer
      main_product_uuid:
        type: string
      quantity:
        type: number
      uuid:
        type: string
    type: object
  dtos.RegisterRequest:
    properties:
      outlet_id:
        type: integer
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  dtos.StockResponse:
    properties:
      product_name:
        type: string
      product_sku:
        type: string
      product_uuid:
        type: string
      quantity:
        type: number
    type: object
  dtos.SupplierResponse:
    properties:
      address:
        type: string
      contact:
        type: string
      id:
        type: integer
      name:
        type: string
      uuid:
        type: string
    type: object
  dtos.UpdateRecipeRequest:
    properties:
      component_uuid:
        type: string
      main_product_uuid:
        type: string
      quantity:
        type: number
    type: object
  dtos.UpdateSupplierRequest:
    properties:
      address:
        type: string
      contact:
        type: string
      name:
        type: string
    type: object
  dtos.UserResponse:
    properties:
      id:
        type: integer
      outlet_id:
        type: integer
      role:
        type: string
      username:
        type: string
      uuid:
        type: string
    type: object
  handlers.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  handlers.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return a JWT token.
      parameters:
      - description: User login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dtos.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Log in a user
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with username, password, role, and optional
        outlet ID.
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dtos.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Register a new user
      tags:
      - Auth
  /auth/users/{uuid}/block:
    put:
      consumes:
      - application/json
      description: Block a user by their Uuid. Only admin can perform this action.
      parameters:
      - description: User Uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Block a user
      tags:
      - Auth
  /auth/users/{uuid}/unblock:
    put:
      consumes:
      - application/json
      description: Unblock a user by their Uuid. Only admin can perform this action.
      parameters:
      - description: User Uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Unblock a user
      tags:
      - Auth
  /orders:
    post:
      consumes:
      - application/json
      description: Create a new order with specified products and quantities.
      parameters:
      - description: Order details
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.OrderResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a new order
      tags:
      - Orders
  /orders/{uuid}:
    get:
      consumes:
      - application/json
      description: Get a single order by its Uuid.
      parameters:
      - description: Order Uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.OrderResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get order by Uuid
      tags:
      - Orders
  /outlets:
    get:
      consumes:
      - application/json
      description: Get a list of all outlets.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dtos.OutletResponse'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get all outlets
      tags:
      - Outlets
    post:
      consumes:
      - application/json
      description: Create a new outlet with the provided details.
      parameters:
      - description: Outlet details
        in: body
        name: outlet
        required: true
        schema:
          $ref: '#/definitions/dtos.OutletCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.OutletResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a new outlet
      tags:
      - Outlets
  /outlets/{outlet_uuid}/orders:
    get:
      consumes:
      - application/json
      description: Get a list of all orders for a given outlet.
      parameters:
      - description: Outlet Uuid
        in: path
        name: outlet_uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dtos.OrderResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get all orders for an outlet
      tags:
      - Orders
  /outlets/{outlet_uuid}/products:
    get:
      consumes:
      - application/json
      description: Get a list of products available in a specific outlet.
      parameters:
      - description: Outlet Uuid
        in: path
        name: outlet_uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dtos.ProductOutletResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get products by outlet
      tags:
      - Products
  /outlets/{outlet_uuid}/purchase-orders:
    get:
      consumes:
      - application/json
      description: Get a list of all purchase orders for a given outlet.
      parameters:
      - description: Outlet Uuid
        in: path
        name: outlet_uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dtos.PurchaseOrderResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get all purchase orders for an outlet
      tags:
      - Purchase Orders
  /outlets/{outlet_uuid}/stocks:
    get:
      consumes:
      - application/json
      description: Get a list of all stock quantities for products in a given outlet.
      parameters:
      - description: Outlet Uuid
        in: path
        name: outlet_uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dtos.StockResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get all stocks for an outlet
      tags:
      - Stocks
  /outlets/{outlet_uuid}/stocks/{product_uuid}:
    get:
      consumes:
      - application/json
      description: Get the stock quantity for a specific product in a given outlet.
      parameters:
      - description: Outlet Uuid
        in: path
        name: outlet_uuid
        required: true
        type: string
      - description: Product Uuid
        in: path
        name: product_uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.StockResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get stock for a product in an outlet
      tags:
      - Stocks
    put:
      consumes:
      - application/json
      description: Update the stock quantity for a specific product in an outlet.
        This is for direct stock adjustments.
      parameters:
      - description: Outlet Uuid
        in: path
        name: outlet_uuid
        required: true
        type: string
      - description: Product Uuid
        in: path
        name: product_uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.StockResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Update stock quantity
      tags:
      - Stocks
  /outlets/{uuid}:
    delete:
      consumes:
      - application/json
      description: Delete an outlet by its Uuid.
      parameters:
      - description: Outlet Uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Delete an outlet
      tags:
      - Outlets
    get:
      consumes:
      - application/json
      description: Get a single outlet by its Uuid.
      parameters:
      - description: Outlet Uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.OutletResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get outlet by Uuid
      tags:
      - Outlets
    put:
      consumes:
      - application/json
      description: Update an existing outlet by its Uuid.
      parameters:
      - description: Outlet Uuid
        in: path
        name: uuid
        required: true
        type: string
      - description: Updated outlet details
        in: body
        name: outlet
        required: true
        schema:
          $ref: '#/definitions/dtos.OutletUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.OutletResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Update an existing outlet
      tags:
      - Outlets
  /products:
    get:
      consumes:
      - application/json
      description: Get a list of all products.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dtos.ProductResponse'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get all products
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Create a new product with the provided details.
      parameters:
      - description: Product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dtos.ProductCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.ProductResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a new product
      tags:
      - Products
  /products/{external_id}:
    get:
      consumes:
      - application/json
      description: Get a single product by its External ID.
      parameters:
      - description: Product External ID (UUID)
        in: path
        name: external_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.ProductResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get product by External ID
      tags:
      - Products
  /products/{main_product_uuid}/recipes:
    get:
      consumes:
      - application/json
      description: Get a list of recipes for a given main product.
      parameters:
      - description: Main Product Uuid
        in: path
        name: main_product_uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dtos.RecipeResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get recipes by main product
      tags:
      - Recipes
  /products/{uuid}:
    delete:
      consumes:
      - application/json
      description: Delete a product by its Uuid.
      parameters:
      - description: Product Uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Delete a product
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Update an existing product by its External ID.
      parameters:
      - description: Product External ID (UUID)
        in: path
        name: uuid
        required: true
        type: string
      - description: Updated product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dtos.ProductUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.ProductResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Update an existing product
      tags:
      - Products
  /purchase-orders:
    post:
      consumes:
      - application/json
      description: Create a new purchase order with specified supplier, outlet, and
        products.
      parameters:
      - description: Purchase order details
        in: body
        name: purchase_order
        required: true
        schema:
          $ref: '#/definitions/dtos.CreatePurchaseOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.PurchaseOrderResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a new purchase order
      tags:
      - Purchase Orders
  /purchase-orders/{uuid}:
    get:
      consumes:
      - application/json
      description: Get a single purchase order by its Uuid.
      parameters:
      - description: Purchase Order Uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.PurchaseOrderResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get purchase order by Uuid
      tags:
      - Purchase Orders
  /purchase-orders/{uuid}/receive:
    put:
      consumes:
      - application/json
      description: Mark a purchase order as completed and update stock quantities.
      parameters:
      - description: Purchase Order Uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.PurchaseOrderResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Receive a purchase order
      tags:
      - Purchase Orders
  /recipes:
    post:
      consumes:
      - application/json
      description: Create a new recipe with the provided details.
      parameters:
      - description: Recipe details
        in: body
        name: recipe
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateRecipeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.RecipeResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a new recipe
      tags:
      - Recipes
  /recipes/{uuid}:
    delete:
      consumes:
      - application/json
      description: Delete a recipe by its Uuid.
      parameters:
      - description: Recipe Uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Delete a recipe
      tags:
      - Recipes
    get:
      consumes:
      - application/json
      description: Get a single recipe by its Uuid.
      parameters:
      - description: Recipe Uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.RecipeResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get recipe by Uuid
      tags:
      - Recipes
    put:
      consumes:
      - application/json
      description: Update an existing recipe by its Uuid.
      parameters:
      - description: Recipe Uuid
        in: path
        name: uuid
        required: true
        type: string
      - description: Updated recipe details
        in: body
        name: recipe
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateRecipeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.RecipeResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Update an existing recipe
      tags:
      - Recipes
  /reports/outlets/{outlet_uuid}/sales:
    get:
      consumes:
      - application/json
      description: Get a sales report for a specific outlet within a date range.
      parameters:
      - description: Outlet Uuid
        in: path
        name: outlet_uuid
        required: true
        type: string
      - description: Start date (YYYY-MM-DD)
        in: query
        name: start_date
        required: true
        type: string
      - description: End date (YYYY-MM-DD)
        in: query
        name: end_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dtos.OrderResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get sales report by outlet
      tags:
      - Reports
  /reports/products/{product_uuid}/sales:
    get:
      consumes:
      - application/json
      description: Get a sales report for a specific product within a date range.
      parameters:
      - description: Product Uuid
        in: path
        name: product_uuid
        required: true
        type: string
      - description: Start date (YYYY-MM-DD)
        in: query
        name: start_date
        required: true
        type: string
      - description: End date (YYYY-MM-DD)
        in: query
        name: end_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dtos.OrderItemResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get sales report by product
      tags:
      - Reports
  /stocks:
    put:
      consumes:
      - application/json
      description: Update the stock quantity for a specific product in an outlet by
        providing IDs in the request body.
      parameters:
      - description: Stock update details
        in: body
        name: stock
        required: true
        schema:
          $ref: '#/definitions/dtos.GlobalStockUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.StockResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Update stock quantity globally
      tags:
      - Stocks
  /suppliers:
    get:
      consumes:
      - application/json
      description: Get a list of all suppliers.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dtos.SupplierResponse'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get all suppliers
      tags:
      - Suppliers
    post:
      consumes:
      - application/json
      description: Create a new supplier with the provided details.
      parameters:
      - description: Supplier details
        in: body
        name: supplier
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateSupplierRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.SupplierResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a new supplier
      tags:
      - Suppliers
  /suppliers/{uuid}:
    delete:
      consumes:
      - application/json
      description: Delete a supplier by its Uuid.
      parameters:
      - description: Supplier Uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Delete a supplier
      tags:
      - Suppliers
    get:
      consumes:
      - application/json
      description: Get a single supplier by its Uuid.
      parameters:
      - description: Supplier Uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.SupplierResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get supplier by Uuid
      tags:
      - Suppliers
    put:
      consumes:
      - application/json
      description: Update an existing supplier by its Uuid.
      parameters:
      - description: Supplier Uuid
        in: path
        name: uuid
        required: true
        type: string
      - description: Updated supplier details
        in: body
        name: supplier
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateSupplierRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.SupplierResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Update an existing supplier
      tags:
      - Suppliers
swagger: "2.0"
